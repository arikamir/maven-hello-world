name: CI

on:
  push:
    branches: [ "master", "pipeline_nextgen", "main" ]
  pull_request:
    branches: [ "master" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Install sha256sum
        run: sudo apt-get install -y coreutils
        
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.increment_version.outputs.NEW_VERSION }}
    defaults:
      run:
        working-directory: my-app
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean package
        

      - name: Ensure clean working directory
        run: git diff --exit-code

      - name: Clean up local modifications
        run: git clean -fdx

      - name: Increment version
        id: increment_version
        run: |
          # Enable error handling
          set -e
          
          # Get the current version
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          # Increment the version
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          # git pull
          git pull
          # Set the new version
          mvn versions:set -DnewVersion=$NEW_VERSION
          # Set the output variable
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          # commit the version change
          mvn versions:commit 
          git config --global user.email "CI@github.com"
          git config --global user.name "CI Process"
          git commit -am "Increment version to $NEW_VERSION"
          # Push the changes
          git push
          
      - name: Build JAR
        run: mvn clean package -Drevision=${{ steps.increment_version.outputs.NEW_VERSION }}

      - name: Generate SHA256 Checksum
        id: generate_checksum
        run: |
          cd target
          sha256sum my-app-${{ steps.increment_version.outputs.NEW_VERSION }}.jar > my-app-${{ steps.increment_version.outputs.NEW_VERSION }}.jar.sha256

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.increment_version.outputs.NEW_VERSION }}
          release_name: Release v${{ steps.increment_version.outputs.NEW_VERSION }}
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: my-app/target/my-app-${{ steps.increment_version.outputs.NEW_VERSION }}.jar
          asset_name: my-app-${{ steps.increment_version.outputs.NEW_VERSION }}.jar
          asset_content_type: application/java-archive

      - name: Upload Checksum to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: my-app/target/my-app-${{ steps.increment_version.outputs.NEW_VERSION }}.jar.sha256
          asset_name: my-app-${{ steps.increment_version.outputs.NEW_VERSION }}.jar.sha256
          asset_content_type: application/java-archive          
         

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Checkstyle
        run: mvn checkstyle:check --file my-app/pom.xml

      - name: PMD
        run: mvn pmd:check --file my-app/pom.xml

      - name: SpotBugs
        run: mvn spotbugs:check --file my-app/pom.xml

  coverage:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: JaCoCo Coverage
        run: mvn jacoco:report --file my-app/pom.xml

  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check --file my-app/pom.xml

      - uses: snyk/actions/setup@master
      - name: Snyk Maven
        uses: snyk/actions/maven-3-jdk-11@master
        with:
          args: --sarif-file-output=snyk.sarif --file=my-app/pom.xml
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
      
  docker:
    runs-on: ubuntu-latest
    needs: [build-and-release, lint, coverage, security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version
        id: extract_version
        run: |
          VERSION=${{ needs.build-and-release.outputs.NEW_VERSION }}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        working-directory: my-app

      - name: Build Docker image
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          docker build --build-arg TAG=${{ steps.extract_version.outputs.VERSION }} -t my-app:${{ steps.extract_version.outputs.VERSION }} .
          docker tag my-app:${{ steps.extract_version.outputs.VERSION }} arikamir/my-app:${{ steps.extract_version.outputs.VERSION }}

      - name: Push Docker image to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker push arikamir/my-app:${{ steps.extract_version.outputs.VERSION }}

      - name: Update Helm chart image tag
        run: |
          sed -i "s|^\(\s*tag:\s*\).*|\1\"${{ steps.extract_version.outputs.VERSION }}\"|g" ArgoCD/charts/my-app/values.yaml
          sed -i "s|^\(\s*image:\s*\).*|\1\"arikamir/my-app:${{ steps.extract_version.outputs.VERSION }}\"|g" ArgoCD/charts/my-app/templates/deployment.yaml

          git config --global user.email "CI@github.com"
          git config --global user.name "CI Process"
          git add ArgoCD/charts/my-app/values.yaml ArgoCD/charts/my-app/templates/deployment.yaml
          git commit -am "Update Helm chart image tag to ${{ steps.extract_version.outputs.VERSION }}" || echo "No changes to commit"
          git pull --rebase
          git push || echo "No changes to push"          

  report:
    runs-on: ubuntu-latest
    needs: [lint, coverage, security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate Report
        run: |
          echo "Generating report..."
          echo "## CI Report" > report.md
          echo "### Linting and Static Analysis" >> report.md
          echo "Checkstyle: Passed" >> report.md
          echo "PMD: Passed" >> report.md
          echo "SpotBugs: Passed" >> report.md
          echo "### Code Coverage" >> report.md
          echo "JaCoCo: 85%" >> report.md
          echo "### Security Scans" >> report.md
          echo "Snyk: Passed" >> report.md
          echo "OWASP Dependency Check: Passed" >> report.md
          echo "### Summary" >> report.md
          echo "All checks passed with at least 80% compliance." >> report.md
          cat report.md

      - name: Fail build if below 80% compliance
        run: |
          if [ $(grep -c "Failed" report.md) -gt 0 ]; then
            echo "Compliance check failed."
            exit 1
          fi
