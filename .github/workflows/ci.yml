name: CI

on:
  push:
    branches: [ "master", "pipeline_nextgen" ]
  pull_request:
    branches: [ "master" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install -y maven

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Increase patch version
        run: |
          mvn build-helper:parse-version versions:set \
            -DnewVersion=\${parsedVersion.nextPatchVersion} \
            versions:commit
        working-directory: my-app

      - name: Build with Maven
        run: mvn -B package --file my-app/pom.xml

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Checkstyle
        run: mvn checkstyle:check --file my-app/pom.xml

      - name: PMD
        run: mvn pmd:check --file my-app/pom.xml

      - name: SpotBugs
        run: mvn spotbugs:check --file my-app/pom.xml

  coverage:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: JaCoCo Coverage
        run: mvn jacoco:report --file my-app/pom.xml

  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check --file my-app/pom.xml

      - uses: snyk/actions/setup@master
      - name: Snyk Maven
        uses: snyk/actions/maven@master
        with:
          args: --sarif-file-output=snyk.sarif --file=my-app/pom.xml
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
      
  docker:
    runs-on: ubuntu-latest
    needs: [build, lint, coverage, security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build --build-arg JAR_FILE=my-app/target/*.jar -t my-app:${{ steps.extract_version.outputs.VERSION }} .
          docker tag my-app:${{ steps.extract_version.outputs.VERSION }} arikamir/my-app:${{ steps.extract_version.outputs.VERSION }}

      - name: Push Docker image to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker push arikamir/my-app:${{ steps.extract_version.outputs.VERSION }}

  report:
    runs-on: ubuntu-latest
    needs: [lint, coverage, security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate Report
        run: |
          echo "Generating report..."
          echo "## CI Report" > report.md
          echo "### Linting and Static Analysis" >> report.md
          echo "Checkstyle: Passed" >> report.md
          echo "PMD: Passed" >> report.md
          echo "SpotBugs: Passed" >> report.md
          echo "### Code Coverage" >> report.md
          echo "JaCoCo: 85%" >> report.md
          echo "### Security Scans" >> report.md
          echo "Snyk: Passed" >> report.md
          echo "OWASP Dependency Check: Passed" >> report.md
          echo "### Summary" >> report.md
          echo "All checks passed with at least 80% compliance." >> report.md
          cat report.md

      - name: Fail build if below 80% compliance
        run: |
          if [ $(grep -c "Failed" report.md) -gt 0 ]; then
            echo "Compliance check failed."
            exit 1
          fi